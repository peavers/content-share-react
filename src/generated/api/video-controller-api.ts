/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { UpdateVideoRequest } from '../models';
// @ts-ignore
import type { Video } from '../models';
// @ts-ignore
import type { VideoWithMetadataDTO } from '../models';
/**
 * VideoControllerApi - axios parameter creator
 * @export
 */
export const VideoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} videoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVideo: async (videoId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('deleteVideo', 'videoId', videoId)
            const localVarPath = `/api/videos/{videoId}`
                .replace(`{${"videoId"}}`, encodeURIComponent(String(videoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationVideos: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/videos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserVideos: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/videos/my-videos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} videoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideo: async (videoId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getVideo', 'videoId', videoId)
            const localVarPath = `/api/videos/{videoId}`
                .replace(`{${"videoId"}}`, encodeURIComponent(String(videoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} videoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoPresignedUrl: async (videoId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getVideoPresignedUrl', 'videoId', videoId)
            const localVarPath = `/api/videos/{videoId}/presigned-url`
                .replace(`{${"videoId"}}`, encodeURIComponent(String(videoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a presigned URL for the video thumbnail image
         * @summary Get video thumbnail presigned URL
         * @param {number} videoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoThumbnailUrl: async (videoId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getVideoThumbnailUrl', 'videoId', videoId)
            const localVarPath = `/api/videos/{videoId}/thumbnail-url`
                .replace(`{${"videoId"}}`, encodeURIComponent(String(videoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a video along with its extracted metadata (if available)
         * @summary Get video with metadata
         * @param {number} videoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoWithMetadata: async (videoId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('getVideoWithMetadata', 'videoId', videoId)
            const localVarPath = `/api/videos/{videoId}/with-metadata`
                .replace(`{${"videoId"}}`, encodeURIComponent(String(videoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update video title and description. User must be admin or video owner.
         * @summary Update video metadata
         * @param {number} videoId 
         * @param {UpdateVideoRequest} updateVideoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVideo: async (videoId: number, updateVideoRequest: UpdateVideoRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            assertParamExists('updateVideo', 'videoId', videoId)
            // verify required parameter 'updateVideoRequest' is not null or undefined
            assertParamExists('updateVideo', 'updateVideoRequest', updateVideoRequest)
            const localVarPath = `/api/videos/{videoId}`
                .replace(`{${"videoId"}}`, encodeURIComponent(String(videoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateVideoRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideoControllerApi - functional programming interface
 * @export
 */
export const VideoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} videoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVideo(videoId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVideo(videoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoControllerApi.deleteVideo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationVideos(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationVideos(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoControllerApi.getOrganizationVideos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserVideos(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Video>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserVideos(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoControllerApi.getUserVideos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} videoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideo(videoId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideo(videoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoControllerApi.getVideo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} videoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoPresignedUrl(videoId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideoPresignedUrl(videoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoControllerApi.getVideoPresignedUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a presigned URL for the video thumbnail image
         * @summary Get video thumbnail presigned URL
         * @param {number} videoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoThumbnailUrl(videoId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideoThumbnailUrl(videoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoControllerApi.getVideoThumbnailUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a video along with its extracted metadata (if available)
         * @summary Get video with metadata
         * @param {number} videoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoWithMetadata(videoId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoWithMetadataDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideoWithMetadata(videoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoControllerApi.getVideoWithMetadata']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update video title and description. User must be admin or video owner.
         * @summary Update video metadata
         * @param {number} videoId 
         * @param {UpdateVideoRequest} updateVideoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVideo(videoId: number, updateVideoRequest: UpdateVideoRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVideo(videoId, updateVideoRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VideoControllerApi.updateVideo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VideoControllerApi - factory interface
 * @export
 */
export const VideoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {number} videoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVideo(videoId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteVideo(videoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationVideos(options?: RawAxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.getOrganizationVideos(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserVideos(options?: RawAxiosRequestConfig): AxiosPromise<Array<Video>> {
            return localVarFp.getUserVideos(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} videoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideo(videoId: number, options?: RawAxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.getVideo(videoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} videoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoPresignedUrl(videoId: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getVideoPresignedUrl(videoId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a presigned URL for the video thumbnail image
         * @summary Get video thumbnail presigned URL
         * @param {number} videoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoThumbnailUrl(videoId: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getVideoThumbnailUrl(videoId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a video along with its extracted metadata (if available)
         * @summary Get video with metadata
         * @param {number} videoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoWithMetadata(videoId: number, options?: RawAxiosRequestConfig): AxiosPromise<VideoWithMetadataDTO> {
            return localVarFp.getVideoWithMetadata(videoId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update video title and description. User must be admin or video owner.
         * @summary Update video metadata
         * @param {number} videoId 
         * @param {UpdateVideoRequest} updateVideoRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVideo(videoId: number, updateVideoRequest: UpdateVideoRequest, options?: RawAxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.updateVideo(videoId, updateVideoRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VideoControllerApi - object-oriented interface
 * @export
 * @class VideoControllerApi
 * @extends {BaseAPI}
 */
export class VideoControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} videoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoControllerApi
     */
    public deleteVideo(videoId: number, options?: RawAxiosRequestConfig) {
        return VideoControllerApiFp(this.configuration).deleteVideo(videoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoControllerApi
     */
    public getOrganizationVideos(options?: RawAxiosRequestConfig) {
        return VideoControllerApiFp(this.configuration).getOrganizationVideos(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoControllerApi
     */
    public getUserVideos(options?: RawAxiosRequestConfig) {
        return VideoControllerApiFp(this.configuration).getUserVideos(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} videoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoControllerApi
     */
    public getVideo(videoId: number, options?: RawAxiosRequestConfig) {
        return VideoControllerApiFp(this.configuration).getVideo(videoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} videoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoControllerApi
     */
    public getVideoPresignedUrl(videoId: number, options?: RawAxiosRequestConfig) {
        return VideoControllerApiFp(this.configuration).getVideoPresignedUrl(videoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a presigned URL for the video thumbnail image
     * @summary Get video thumbnail presigned URL
     * @param {number} videoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoControllerApi
     */
    public getVideoThumbnailUrl(videoId: number, options?: RawAxiosRequestConfig) {
        return VideoControllerApiFp(this.configuration).getVideoThumbnailUrl(videoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a video along with its extracted metadata (if available)
     * @summary Get video with metadata
     * @param {number} videoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoControllerApi
     */
    public getVideoWithMetadata(videoId: number, options?: RawAxiosRequestConfig) {
        return VideoControllerApiFp(this.configuration).getVideoWithMetadata(videoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update video title and description. User must be admin or video owner.
     * @summary Update video metadata
     * @param {number} videoId 
     * @param {UpdateVideoRequest} updateVideoRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoControllerApi
     */
    public updateVideo(videoId: number, updateVideoRequest: UpdateVideoRequest, options?: RawAxiosRequestConfig) {
        return VideoControllerApiFp(this.configuration).updateVideo(videoId, updateVideoRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

