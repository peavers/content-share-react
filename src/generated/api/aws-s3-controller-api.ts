/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { UploadCompletionRequest } from '../models';
// @ts-ignore
import type { UploadRequest } from '../models';
// @ts-ignore
import type { UploadResult } from '../models';
/**
 * AwsS3ControllerApi - axios parameter creator
 * @export
 */
export const AwsS3ControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} uploadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abortUpload: async (uploadId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadId' is not null or undefined
            assertParamExists('abortUpload', 'uploadId', uploadId)
            const localVarPath = `/api/s3/upload/{uploadId}`
                .replace(`{${"uploadId"}}`, encodeURIComponent(String(uploadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uploadId 
         * @param {UploadCompletionRequest} uploadCompletionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeMultipartUpload: async (uploadId: string, uploadCompletionRequest: UploadCompletionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadId' is not null or undefined
            assertParamExists('completeMultipartUpload', 'uploadId', uploadId)
            // verify required parameter 'uploadCompletionRequest' is not null or undefined
            assertParamExists('completeMultipartUpload', 'uploadCompletionRequest', uploadCompletionRequest)
            const localVarPath = `/api/s3/upload/complete/{uploadId}`
                .replace(`{${"uploadId"}}`, encodeURIComponent(String(uploadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadCompletionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UploadRequest} uploadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateUpload: async (uploadRequest: UploadRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadRequest' is not null or undefined
            assertParamExists('initiateUpload', 'uploadRequest', uploadRequest)
            const localVarPath = `/api/s3/upload/initiate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBuckets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/s3/buckets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AwsS3ControllerApi - functional programming interface
 * @export
 */
export const AwsS3ControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AwsS3ControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} uploadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abortUpload(uploadId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.abortUpload(uploadId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AwsS3ControllerApi.abortUpload']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uploadId 
         * @param {UploadCompletionRequest} uploadCompletionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeMultipartUpload(uploadId: string, uploadCompletionRequest: UploadCompletionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeMultipartUpload(uploadId, uploadCompletionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AwsS3ControllerApi.completeMultipartUpload']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UploadRequest} uploadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initiateUpload(uploadRequest: UploadRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initiateUpload(uploadRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AwsS3ControllerApi.initiateUpload']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBuckets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBuckets(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AwsS3ControllerApi.listBuckets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AwsS3ControllerApi - factory interface
 * @export
 */
export const AwsS3ControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AwsS3ControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} uploadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abortUpload(uploadId: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.abortUpload(uploadId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uploadId 
         * @param {UploadCompletionRequest} uploadCompletionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeMultipartUpload(uploadId: string, uploadCompletionRequest: UploadCompletionRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.completeMultipartUpload(uploadId, uploadCompletionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UploadRequest} uploadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateUpload(uploadRequest: UploadRequest, options?: RawAxiosRequestConfig): AxiosPromise<UploadResult> {
            return localVarFp.initiateUpload(uploadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBuckets(options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.listBuckets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AwsS3ControllerApi - object-oriented interface
 * @export
 * @class AwsS3ControllerApi
 * @extends {BaseAPI}
 */
export class AwsS3ControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} uploadId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsS3ControllerApi
     */
    public abortUpload(uploadId: string, options?: RawAxiosRequestConfig) {
        return AwsS3ControllerApiFp(this.configuration).abortUpload(uploadId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uploadId 
     * @param {UploadCompletionRequest} uploadCompletionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsS3ControllerApi
     */
    public completeMultipartUpload(uploadId: string, uploadCompletionRequest: UploadCompletionRequest, options?: RawAxiosRequestConfig) {
        return AwsS3ControllerApiFp(this.configuration).completeMultipartUpload(uploadId, uploadCompletionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UploadRequest} uploadRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsS3ControllerApi
     */
    public initiateUpload(uploadRequest: UploadRequest, options?: RawAxiosRequestConfig) {
        return AwsS3ControllerApiFp(this.configuration).initiateUpload(uploadRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsS3ControllerApi
     */
    public listBuckets(options?: RawAxiosRequestConfig) {
        return AwsS3ControllerApiFp(this.configuration).listBuckets(options).then((request) => request(this.axios, this.basePath));
    }
}

