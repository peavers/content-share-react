/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateOrganizationRequest
 */
export interface CreateOrganizationRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    'avatarUrl': string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    'websiteUrl': string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    'visibility': CreateOrganizationRequestVisibilityEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    'plan': string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof CreateOrganizationRequest
     */
    'settings': { [key: string]: any; };
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateOrganizationRequest
     */
    'inviteEmails': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateOrganizationRequest
     */
    'inviteRoles': Array<CreateOrganizationRequestInviteRolesEnum>;
}

export const CreateOrganizationRequestVisibilityEnum = {
    Public: 'PUBLIC',
    Private: 'PRIVATE'
} as const;

export type CreateOrganizationRequestVisibilityEnum = typeof CreateOrganizationRequestVisibilityEnum[keyof typeof CreateOrganizationRequestVisibilityEnum];
export const CreateOrganizationRequestInviteRolesEnum = {
    Owner: 'OWNER',
    Admin: 'ADMIN',
    Member: 'MEMBER'
} as const;

export type CreateOrganizationRequestInviteRolesEnum = typeof CreateOrganizationRequestInviteRolesEnum[keyof typeof CreateOrganizationRequestInviteRolesEnum];

/**
 * 
 * @export
 * @interface InviteMemberRequest
 */
export interface InviteMemberRequest {
    /**
     * 
     * @type {string}
     * @memberof InviteMemberRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof InviteMemberRequest
     */
    'role': InviteMemberRequestRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof InviteMemberRequest
     */
    'message': string;
}

export const InviteMemberRequestRoleEnum = {
    Owner: 'OWNER',
    Admin: 'ADMIN',
    Member: 'MEMBER'
} as const;

export type InviteMemberRequestRoleEnum = typeof InviteMemberRequestRoleEnum[keyof typeof InviteMemberRequestRoleEnum];

/**
 * 
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'avatarUrl': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'websiteUrl': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'organizationType': OrganizationOrganizationTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'visibility': OrganizationVisibilityEnum;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'plan': string;
    /**
     * 
     * @type {number}
     * @memberof Organization
     */
    'maxStorageGb': number;
    /**
     * 
     * @type {number}
     * @memberof Organization
     */
    'usedStorageBytes': number;
    /**
     * 
     * @type {number}
     * @memberof Organization
     */
    'maxMembers': number;
    /**
     * 
     * @type {number}
     * @memberof Organization
     */
    'maxVideos': number;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Organization
     */
    'settings': { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    's3Bucket': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'customDomain': string;
    /**
     * 
     * @type {boolean}
     * @memberof Organization
     */
    'active': boolean;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'updatedAt': string;
    /**
     * 
     * @type {Array<OrganizationMembership>}
     * @memberof Organization
     */
    'memberships': Array<OrganizationMembership>;
    /**
     * 
     * @type {number}
     * @memberof Organization
     */
    'memberCount': number;
    /**
     * 
     * @type {number}
     * @memberof Organization
     */
    'videoCount': number;
}

export const OrganizationOrganizationTypeEnum = {
    Personal: 'PERSONAL',
    Organization: 'ORGANIZATION'
} as const;

export type OrganizationOrganizationTypeEnum = typeof OrganizationOrganizationTypeEnum[keyof typeof OrganizationOrganizationTypeEnum];
export const OrganizationVisibilityEnum = {
    Public: 'PUBLIC',
    Private: 'PRIVATE'
} as const;

export type OrganizationVisibilityEnum = typeof OrganizationVisibilityEnum[keyof typeof OrganizationVisibilityEnum];

/**
 * 
 * @export
 * @interface OrganizationInvitation
 */
export interface OrganizationInvitation {
    /**
     * 
     * @type {number}
     * @memberof OrganizationInvitation
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof OrganizationInvitation
     */
    'organizationId': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationInvitation
     */
    'invitedBy': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationInvitation
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationInvitation
     */
    'role': OrganizationInvitationRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof OrganizationInvitation
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationInvitation
     */
    'status': OrganizationInvitationStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof OrganizationInvitation
     */
    'expiresAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationInvitation
     */
    'acceptedAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationInvitation
     */
    'createdAt': string;
    /**
     * 
     * @type {Organization}
     * @memberof OrganizationInvitation
     */
    'organization': Organization;
    /**
     * 
     * @type {User}
     * @memberof OrganizationInvitation
     */
    'inviter': User;
    /**
     * 
     * @type {boolean}
     * @memberof OrganizationInvitation
     */
    'active': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrganizationInvitation
     */
    'expired': boolean;
}

export const OrganizationInvitationRoleEnum = {
    Owner: 'OWNER',
    Admin: 'ADMIN',
    Member: 'MEMBER'
} as const;

export type OrganizationInvitationRoleEnum = typeof OrganizationInvitationRoleEnum[keyof typeof OrganizationInvitationRoleEnum];
export const OrganizationInvitationStatusEnum = {
    Pending: 'PENDING',
    Accepted: 'ACCEPTED',
    Declined: 'DECLINED',
    Expired: 'EXPIRED'
} as const;

export type OrganizationInvitationStatusEnum = typeof OrganizationInvitationStatusEnum[keyof typeof OrganizationInvitationStatusEnum];

/**
 * 
 * @export
 * @interface OrganizationMembership
 */
export interface OrganizationMembership {
    /**
     * 
     * @type {number}
     * @memberof OrganizationMembership
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof OrganizationMembership
     */
    'organizationId': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationMembership
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationMembership
     */
    'role': OrganizationMembershipRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof OrganizationMembership
     */
    'status': OrganizationMembershipStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof OrganizationMembership
     */
    'joinedAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationMembership
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationMembership
     */
    'updatedAt': string;
    /**
     * 
     * @type {any}
     * @memberof OrganizationMembership
     */
    'organization': any;
    /**
     * 
     * @type {User}
     * @memberof OrganizationMembership
     */
    'user': User;
}

export const OrganizationMembershipRoleEnum = {
    Owner: 'OWNER',
    Admin: 'ADMIN',
    Member: 'MEMBER'
} as const;

export type OrganizationMembershipRoleEnum = typeof OrganizationMembershipRoleEnum[keyof typeof OrganizationMembershipRoleEnum];
export const OrganizationMembershipStatusEnum = {
    Active: 'ACTIVE',
    Pending: 'PENDING',
    Suspended: 'SUSPENDED'
} as const;

export type OrganizationMembershipStatusEnum = typeof OrganizationMembershipStatusEnum[keyof typeof OrganizationMembershipStatusEnum];

/**
 * 
 * @export
 * @interface PartInfo
 */
export interface PartInfo {
    /**
     * 
     * @type {number}
     * @memberof PartInfo
     */
    'partNumber': number;
    /**
     * 
     * @type {string}
     * @memberof PartInfo
     */
    'etag': string;
}
/**
 * 
 * @export
 * @interface PresignedUrlInfo
 */
export interface PresignedUrlInfo {
    /**
     * 
     * @type {number}
     * @memberof PresignedUrlInfo
     */
    'partNumber': number;
    /**
     * 
     * @type {string}
     * @memberof PresignedUrlInfo
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof PresignedUrlInfo
     */
    'expiresAt': string;
}
/**
 * 
 * @export
 * @interface UploadCompletionRequest
 */
export interface UploadCompletionRequest {
    /**
     * 
     * @type {Array<PartInfo>}
     * @memberof UploadCompletionRequest
     */
    'parts': Array<PartInfo>;
}
/**
 * 
 * @export
 * @interface UploadRequest
 */
export interface UploadRequest {
    /**
     * 
     * @type {string}
     * @memberof UploadRequest
     */
    'fileName': string;
    /**
     * 
     * @type {number}
     * @memberof UploadRequest
     */
    'fileSize': number;
    /**
     * 
     * @type {string}
     * @memberof UploadRequest
     */
    'contentType': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof UploadRequest
     */
    'metadata': { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof UploadRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof UploadRequest
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface UploadResult
 */
export interface UploadResult {
    /**
     * 
     * @type {string}
     * @memberof UploadResult
     */
    'uploadId': string;
    /**
     * 
     * @type {string}
     * @memberof UploadResult
     */
    'uploadType': string;
    /**
     * 
     * @type {string}
     * @memberof UploadResult
     */
    'fileKey': string;
    /**
     * 
     * @type {number}
     * @memberof UploadResult
     */
    'chunkSize': number;
    /**
     * 
     * @type {number}
     * @memberof UploadResult
     */
    'totalChunks': number;
    /**
     * 
     * @type {Array<PresignedUrlInfo>}
     * @memberof UploadResult
     */
    'presignedUrls': Array<PresignedUrlInfo>;
    /**
     * 
     * @type {string}
     * @memberof UploadResult
     */
    'completeUrl': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'avatarUrl': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'personalOrganizationId': string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'emailVerified': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'active': boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastLoginAt': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updatedAt': string;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'personalOrganization': any;
}
/**
 * 
 * @export
 * @interface UserProfileDto
 */
export interface UserProfileDto {
    /**
     * 
     * @type {string}
     * @memberof UserProfileDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserProfileDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserProfileDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof UserProfileDto
     */
    'lastName': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserProfileDto
     */
    'groups': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserProfileDto
     */
    'scopes': Array<string>;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof UserProfileDto
     */
    'attributes': { [key: string]: any; };
}

/**
 * AwsS3ControllerApi - axios parameter creator
 * @export
 */
export const AwsS3ControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} uploadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abortUpload: async (uploadId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadId' is not null or undefined
            assertParamExists('abortUpload', 'uploadId', uploadId)
            const localVarPath = `/api/s3/upload/{uploadId}`
                .replace(`{${"uploadId"}}`, encodeURIComponent(String(uploadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uploadId 
         * @param {UploadCompletionRequest} uploadCompletionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeMultipartUpload: async (uploadId: string, uploadCompletionRequest: UploadCompletionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadId' is not null or undefined
            assertParamExists('completeMultipartUpload', 'uploadId', uploadId)
            // verify required parameter 'uploadCompletionRequest' is not null or undefined
            assertParamExists('completeMultipartUpload', 'uploadCompletionRequest', uploadCompletionRequest)
            const localVarPath = `/api/s3/upload/complete/{uploadId}`
                .replace(`{${"uploadId"}}`, encodeURIComponent(String(uploadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadCompletionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UploadRequest} uploadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateUpload: async (uploadRequest: UploadRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadRequest' is not null or undefined
            assertParamExists('initiateUpload', 'uploadRequest', uploadRequest)
            const localVarPath = `/api/s3/upload/initiate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(uploadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBuckets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/s3/buckets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AwsS3ControllerApi - functional programming interface
 * @export
 */
export const AwsS3ControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AwsS3ControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} uploadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abortUpload(uploadId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.abortUpload(uploadId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AwsS3ControllerApi.abortUpload']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uploadId 
         * @param {UploadCompletionRequest} uploadCompletionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeMultipartUpload(uploadId: string, uploadCompletionRequest: UploadCompletionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeMultipartUpload(uploadId, uploadCompletionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AwsS3ControllerApi.completeMultipartUpload']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UploadRequest} uploadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initiateUpload(uploadRequest: UploadRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initiateUpload(uploadRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AwsS3ControllerApi.initiateUpload']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBuckets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBuckets(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AwsS3ControllerApi.listBuckets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AwsS3ControllerApi - factory interface
 * @export
 */
export const AwsS3ControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AwsS3ControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} uploadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abortUpload(uploadId: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.abortUpload(uploadId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uploadId 
         * @param {UploadCompletionRequest} uploadCompletionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeMultipartUpload(uploadId: string, uploadCompletionRequest: UploadCompletionRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.completeMultipartUpload(uploadId, uploadCompletionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UploadRequest} uploadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateUpload(uploadRequest: UploadRequest, options?: RawAxiosRequestConfig): AxiosPromise<UploadResult> {
            return localVarFp.initiateUpload(uploadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBuckets(options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.listBuckets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AwsS3ControllerApi - object-oriented interface
 * @export
 * @class AwsS3ControllerApi
 * @extends {BaseAPI}
 */
export class AwsS3ControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} uploadId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsS3ControllerApi
     */
    public abortUpload(uploadId: string, options?: RawAxiosRequestConfig) {
        return AwsS3ControllerApiFp(this.configuration).abortUpload(uploadId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uploadId 
     * @param {UploadCompletionRequest} uploadCompletionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsS3ControllerApi
     */
    public completeMultipartUpload(uploadId: string, uploadCompletionRequest: UploadCompletionRequest, options?: RawAxiosRequestConfig) {
        return AwsS3ControllerApiFp(this.configuration).completeMultipartUpload(uploadId, uploadCompletionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UploadRequest} uploadRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsS3ControllerApi
     */
    public initiateUpload(uploadRequest: UploadRequest, options?: RawAxiosRequestConfig) {
        return AwsS3ControllerApiFp(this.configuration).initiateUpload(uploadRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AwsS3ControllerApi
     */
    public listBuckets(options?: RawAxiosRequestConfig) {
        return AwsS3ControllerApiFp(this.configuration).listBuckets(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrganizationControllerApi - axios parameter creator
 * @export
 */
export const OrganizationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptInvitation: async (token: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('acceptInvitation', 'token', token)
            const localVarPath = `/api/organizations/invitations/{token}/accept`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrganizationRequest} createOrganizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization: async (createOrganizationRequest: CreateOrganizationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOrganizationRequest' is not null or undefined
            assertParamExists('createOrganization', 'createOrganizationRequest', createOrganizationRequest)
            const localVarPath = `/api/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrganizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineInvitation: async (token: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('declineInvitation', 'token', token)
            const localVarPath = `/api/organizations/invitations/{token}/decline`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganization: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('deleteOrganization', 'organizationId', organizationId)
            const localVarPath = `/api/organizations/{organizationId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getOrganization', 'organizationId', organizationId)
            const localVarPath = `/api/organizations/{organizationId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationMembers: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getOrganizationMembers', 'organizationId', organizationId)
            const localVarPath = `/api/organizations/{organizationId}/members`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInvitations: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/organizations/invitations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOrganizations: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {InviteMemberRequest} inviteMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteMember: async (organizationId: string, inviteMemberRequest: InviteMemberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('inviteMember', 'organizationId', organizationId)
            // verify required parameter 'inviteMemberRequest' is not null or undefined
            assertParamExists('inviteMember', 'inviteMemberRequest', inviteMemberRequest)
            const localVarPath = `/api/organizations/{organizationId}/invitations`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inviteMemberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} targetUserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMember: async (organizationId: string, targetUserId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('removeMember', 'organizationId', organizationId)
            // verify required parameter 'targetUserId' is not null or undefined
            assertParamExists('removeMember', 'targetUserId', targetUserId)
            const localVarPath = `/api/organizations/{organizationId}/members/{targetUserId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"targetUserId"}}`, encodeURIComponent(String(targetUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} targetUserId 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberRole: async (organizationId: string, targetUserId: string, requestBody: { [key: string]: string; }, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('updateMemberRole', 'organizationId', organizationId)
            // verify required parameter 'targetUserId' is not null or undefined
            assertParamExists('updateMemberRole', 'targetUserId', targetUserId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('updateMemberRole', 'requestBody', requestBody)
            const localVarPath = `/api/organizations/{organizationId}/members/{targetUserId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"targetUserId"}}`, encodeURIComponent(String(targetUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {CreateOrganizationRequest} createOrganizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganization: async (organizationId: string, createOrganizationRequest: CreateOrganizationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('updateOrganization', 'organizationId', organizationId)
            // verify required parameter 'createOrganizationRequest' is not null or undefined
            assertParamExists('updateOrganization', 'createOrganizationRequest', createOrganizationRequest)
            const localVarPath = `/api/organizations/{organizationId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrganizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationControllerApi - functional programming interface
 * @export
 */
export const OrganizationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptInvitation(token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationMembership>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptInvitation(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationControllerApi.acceptInvitation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateOrganizationRequest} createOrganizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganization(createOrganizationRequest: CreateOrganizationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganization(createOrganizationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationControllerApi.createOrganization']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async declineInvitation(token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.declineInvitation(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationControllerApi.declineInvitation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganization(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganization(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationControllerApi.deleteOrganization']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganization(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationControllerApi.getOrganization']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationMembers(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationMembership>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationMembers(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationControllerApi.getOrganizationMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInvitations(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationInvitation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInvitations(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationControllerApi.getUserInvitations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserOrganizations(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Organization>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserOrganizations(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationControllerApi.getUserOrganizations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {InviteMemberRequest} inviteMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteMember(organizationId: string, inviteMemberRequest: InviteMemberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationInvitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteMember(organizationId, inviteMemberRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationControllerApi.inviteMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} targetUserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMember(organizationId: string, targetUserId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMember(organizationId, targetUserId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationControllerApi.removeMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} targetUserId 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMemberRole(organizationId: string, targetUserId: string, requestBody: { [key: string]: string; }, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationMembership>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMemberRole(organizationId, targetUserId, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationControllerApi.updateMemberRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {CreateOrganizationRequest} createOrganizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrganization(organizationId: string, createOrganizationRequest: CreateOrganizationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganization(organizationId, createOrganizationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationControllerApi.updateOrganization']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrganizationControllerApi - factory interface
 * @export
 */
export const OrganizationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptInvitation(token: string, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationMembership> {
            return localVarFp.acceptInvitation(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateOrganizationRequest} createOrganizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization(createOrganizationRequest: CreateOrganizationRequest, options?: RawAxiosRequestConfig): AxiosPromise<Organization> {
            return localVarFp.createOrganization(createOrganizationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineInvitation(token: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.declineInvitation(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganization(organizationId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteOrganization(organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization(organizationId: string, options?: RawAxiosRequestConfig): AxiosPromise<Organization> {
            return localVarFp.getOrganization(organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationMembers(organizationId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<OrganizationMembership>> {
            return localVarFp.getOrganizationMembers(organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInvitations(options?: RawAxiosRequestConfig): AxiosPromise<Array<OrganizationInvitation>> {
            return localVarFp.getUserInvitations(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserOrganizations(options?: RawAxiosRequestConfig): AxiosPromise<Array<Organization>> {
            return localVarFp.getUserOrganizations(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {InviteMemberRequest} inviteMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteMember(organizationId: string, inviteMemberRequest: InviteMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationInvitation> {
            return localVarFp.inviteMember(organizationId, inviteMemberRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} targetUserId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMember(organizationId: string, targetUserId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeMember(organizationId, targetUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} targetUserId 
         * @param {{ [key: string]: string; }} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberRole(organizationId: string, targetUserId: string, requestBody: { [key: string]: string; }, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationMembership> {
            return localVarFp.updateMemberRole(organizationId, targetUserId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {CreateOrganizationRequest} createOrganizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganization(organizationId: string, createOrganizationRequest: CreateOrganizationRequest, options?: RawAxiosRequestConfig): AxiosPromise<Organization> {
            return localVarFp.updateOrganization(organizationId, createOrganizationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationControllerApi - object-oriented interface
 * @export
 * @class OrganizationControllerApi
 * @extends {BaseAPI}
 */
export class OrganizationControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public acceptInvitation(token: string, options?: RawAxiosRequestConfig) {
        return OrganizationControllerApiFp(this.configuration).acceptInvitation(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateOrganizationRequest} createOrganizationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public createOrganization(createOrganizationRequest: CreateOrganizationRequest, options?: RawAxiosRequestConfig) {
        return OrganizationControllerApiFp(this.configuration).createOrganization(createOrganizationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public declineInvitation(token: string, options?: RawAxiosRequestConfig) {
        return OrganizationControllerApiFp(this.configuration).declineInvitation(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} organizationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public deleteOrganization(organizationId: string, options?: RawAxiosRequestConfig) {
        return OrganizationControllerApiFp(this.configuration).deleteOrganization(organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} organizationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public getOrganization(organizationId: string, options?: RawAxiosRequestConfig) {
        return OrganizationControllerApiFp(this.configuration).getOrganization(organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} organizationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public getOrganizationMembers(organizationId: string, options?: RawAxiosRequestConfig) {
        return OrganizationControllerApiFp(this.configuration).getOrganizationMembers(organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public getUserInvitations(options?: RawAxiosRequestConfig) {
        return OrganizationControllerApiFp(this.configuration).getUserInvitations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public getUserOrganizations(options?: RawAxiosRequestConfig) {
        return OrganizationControllerApiFp(this.configuration).getUserOrganizations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} organizationId 
     * @param {InviteMemberRequest} inviteMemberRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public inviteMember(organizationId: string, inviteMemberRequest: InviteMemberRequest, options?: RawAxiosRequestConfig) {
        return OrganizationControllerApiFp(this.configuration).inviteMember(organizationId, inviteMemberRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} organizationId 
     * @param {string} targetUserId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public removeMember(organizationId: string, targetUserId: string, options?: RawAxiosRequestConfig) {
        return OrganizationControllerApiFp(this.configuration).removeMember(organizationId, targetUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} organizationId 
     * @param {string} targetUserId 
     * @param {{ [key: string]: string; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public updateMemberRole(organizationId: string, targetUserId: string, requestBody: { [key: string]: string; }, options?: RawAxiosRequestConfig) {
        return OrganizationControllerApiFp(this.configuration).updateMemberRole(organizationId, targetUserId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} organizationId 
     * @param {CreateOrganizationRequest} createOrganizationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public updateOrganization(organizationId: string, createOrganizationRequest: CreateOrganizationRequest, options?: RawAxiosRequestConfig) {
        return OrganizationControllerApiFp(this.configuration).updateOrganization(organizationId, createOrganizationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SecurityControllerApi - axios parameter creator
 * @export
 */
export const SecurityControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminOnly: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecurityControllerApi - functional programming interface
 * @export
 */
export const SecurityControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SecurityControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminOnly(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminOnly(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SecurityControllerApi.adminOnly']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SecurityControllerApi - factory interface
 * @export
 */
export const SecurityControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SecurityControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminOnly(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.adminOnly(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecurityControllerApi - object-oriented interface
 * @export
 * @class SecurityControllerApi
 * @extends {BaseAPI}
 */
export class SecurityControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityControllerApi
     */
    public adminOnly(options?: RawAxiosRequestConfig) {
        return SecurityControllerApiFp(this.configuration).adminOnly(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserProfileDto} userProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfile: async (userProfileDto: UserProfileDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userProfileDto' is not null or undefined
            assertParamExists('updateUserProfile', 'userProfileDto', userProfileDto)
            const localVarPath = `/api/user/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userProfileDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateToken: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserProfile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.getUserProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserProfileDto} userProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserProfile(userProfileDto: UserProfileDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserProfile(userProfileDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.updateUserProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateToken(options: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateToken(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.validateToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile(options?: RawAxiosRequestConfig): AxiosPromise<UserProfileDto> {
            return localVarFp.getUserProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserProfileDto} userProfileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfile(userProfileDto: UserProfileDto, options?: RawAxiosRequestConfig): AxiosPromise<UserProfileDto> {
            return localVarFp.updateUserProfile(userProfileDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateToken(options: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.validateToken(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUserProfile(options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getUserProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserProfileDto} userProfileDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public updateUserProfile(userProfileDto: UserProfileDto, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).updateUserProfile(userProfileDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public validateToken(options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).validateToken(options).then((request) => request(this.axios, this.basePath));
    }
}



